<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>James Blog on James Blog</title>
    <link>https://newjames.github.io/</link>
    <description>Recent content in James Blog on James Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Nov 2019 15:56:23 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Qt语言家使用</title>
      <link>https://newjames.github.io/post/seventh/</link>
      <pubDate>Wed, 06 Nov 2019 15:56:23 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/seventh/</guid>
      <description>

&lt;h1 id=&#34;qt语言家使用&#34;&gt;Qt语言家使用&lt;/h1&gt;

&lt;p&gt;最近要将项目做汉化，于是使用Qt语言家插件，它能够自动识别Qt和qml文件中的tr(&amp;ldquo;&amp;rdquo;)字段并生成文件供调用。&lt;/p&gt;

&lt;p&gt;以下是基本操作步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在项目.pro文件中添加&lt;code&gt;TRANSLATIONS + =zh_Cn.ts  zh_En.ts&lt;/code&gt;
这里是指中英文两个语言版本，这里我的源项目是英文的，如果要将qml的tr一起添加进去则要添加以下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lupdate_only
{
SOURCES+= \
./src/VehicleSetup/*.qml \
./src/QmlControls/*.qml \
./src/AnalyzeView/*.qml \
./src/FlightDisplay/*.qml \
./src/FlightMap/*.qml \
./src/FlightMap/Widgets/*.qml \
./src/AutoPilotPlugins/PX4/*.qml \
./src/MissionEditor/*.qml \
./src/ViewWidgets/*.qml \
./src/ui/toolbar/*.qml \
./src/ui/*.qml \
./src/FactSystem/FactControls/*.qml
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是在lupdate_only中添加qml文件路径
- 之后点击工具-&amp;gt;外部-&amp;gt;Qt语言家-&amp;gt;更新翻译
&lt;img src=&#34;https://newjames.github.io/images/7-1.png&#34; alt=&#34;更新翻译&#34; /&gt;
之后在目录下便会生成两个.ts文件
- 打开对应编译器目录下bin文件中linguist.exe Qt语言家
- 用Qt语言家打开相应的.ts文件进行翻译
&lt;img src=&#34;https://newjames.github.io/images/7-2.png&#34; alt=&#34;更新翻译&#34; /&gt;
- 翻译完成后点击Qtcreator工具-&amp;gt;外部-&amp;gt;Qt语言家-&amp;gt;发布翻译
- 在文件中引用.ts文件，注意：引用和必须在窗口创建前初始化时实例化QTrasnlator并加载好.ts文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mTranslator = new QTranslator(this);
_loadTranslatorFile();

void QGCApplication::_loadTranslatorFile()
{

bool isLoad=mTranslator-&amp;gt;load(QCoreApplication::applicationDirPath()+&amp;quot;/zh_Cn.qm&amp;quot;);
qDebug()&amp;lt;&amp;lt;&amp;quot;setChinese&amp;quot;&amp;lt;&amp;lt;isLoad&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;
this-&amp;gt;installTranslator(mTranslator);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>QGC源码学习（3）关键数据传输</title>
      <link>https://newjames.github.io/post/sixth/</link>
      <pubDate>Wed, 06 Nov 2019 15:56:14 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/sixth/</guid>
      <description>

&lt;h1 id=&#34;qgc源码学习-3-关键数据传输&#34;&gt;QGC源码学习（3）关键数据传输&lt;/h1&gt;

&lt;p&gt;在无人系统上位机显示中，最为关键的数据为IMU上传的Roll,Pitch,Yaw和高度（深度）以及方位，在QGC中，由&lt;code&gt;MAVLinkProtocol::messageReceived&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接收到Mavlink数据后，通过信号槽：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Vehicle.cc
connect(_mavlink, &amp;amp;MAVLinkProtocol::messageReceived,     this, &amp;amp;Vehicle::_mavlinkMessageReceived);
void Vehicle::_mavlinkMessageReceived(LinkInterface* link, mavlink_message_t message)
{
    ...
    ...
    ...
    _uas-&amp;gt;receiveMessage(message);
}

UAS.cc
void UAS::receiveMessage(mavlink_message_t message)
{
    switch (message.compid)
    case MAV_...1:
    case MAV_...2:
    case MAV_...3:
    case MAVLINK_MSG_ID_ATTITUDE:
        {
            mavlink_attitude_t attitude;
            mavlink_msg_attitude_decode(&amp;amp;message, &amp;amp;attitude);
            quint64 time = getUnixReferenceTime(attitude.time_boot_ms);

            emit attitudeChanged(this, message.compid, QGC::limitAngleToPMPIf(attitude.roll), QGC::limitAngleToPMPIf(attitude.pitch), QGC::limitAngleToPMPIf(attitude.yaw), time);

            if (!wrongComponent)
            {
                lastAttitude = time;
                setRoll(QGC::limitAngleToPMPIf(attitude.roll));
                setPitch(QGC::limitAngleToPMPIf(attitude.pitch));
                setYaw(QGC::limitAngleToPMPIf(attitude.yaw));

                attitudeKnown = true;
                emit attitudeChanged(this, getRoll(), getPitch(), getYaw(), time);
            }
        }
            break;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在状态机中，receive函数从message中提取出传输的各个数据，并进行数据处理后通过&lt;code&gt;emit valueChanged()&lt;/code&gt;，发射信号触发Vehicle中的槽函数对数据进行更新。&lt;/p&gt;

&lt;p&gt;在Vehicle中，roll，pitch，yaw均为Fact实例，通过setRawValue()赋值。最后在qml中调用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QGC源码学习(2)-ToolBox各模块学习</title>
      <link>https://newjames.github.io/post/fifth/</link>
      <pubDate>Wed, 06 Nov 2019 15:08:39 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/fifth/</guid>
      <description>

&lt;h1 id=&#34;qgc源码学习-2-toolbox各模块学习&#34;&gt;QGC源码学习(2)-ToolBox各模块学习&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;QGC工具模块主要有以下组成：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;settingsManager&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;corePlugin&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;audioOutput&lt;/strong&gt; -声音管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;factSystem&lt;/strong&gt;  -实例数据管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;firmwarePluginManager&lt;/strong&gt; -固件管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;imageProvider&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;joystickManager&lt;/strong&gt; -摇杆管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;linkManager&lt;/strong&gt; -数据连接管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mavlinkProtocol&lt;/strong&gt; -mavlink协议&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;misiionConmmandTree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multiVehicleManager&lt;/strong&gt; -多机器管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mapEngineManager&lt;/strong&gt; -地图引擎管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uasMessageHandler&lt;/strong&gt; -日志信息管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;followMe&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qgcPositionManager&lt;/strong&gt; -QGC位置管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;videoManager&lt;/strong&gt; -视频管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mavlinkLogManager&lt;/strong&gt; -mvlink协议注册管理&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>QGC源码学习(1)-main函数学习</title>
      <link>https://newjames.github.io/post/fourth/</link>
      <pubDate>Wed, 06 Nov 2019 14:08:39 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/fourth/</guid>
      <description>

&lt;h1 id=&#34;qgroundcontrol-源码学习-1-万物之始main&#34;&gt;QGroundcontrol 源码学习（1）-万物之始main&lt;/h1&gt;

&lt;p&gt;作为非科班人员，第一次接触像QGroundcontrol这么庞大且杂乱的项目还是一头雾水，我在前期花了许多无效时间去摸索整个QGroundControl的架构和模型，&lt;/p&gt;

&lt;p&gt;并由此总结出比较简单的中大型项目的学习规律。在此记录下来。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;qgroundcontrol启动顺序&#34;&gt;QGroundControl启动顺序&lt;/h2&gt;

&lt;p&gt;首选不不关注QGC的大体框架，即使通过文档先了解了也只是有了大致概念，真正深入理解和在此基础上进行二次开发还是需要细致到源码细节上。因此我还是先找到QGC的&lt;/p&gt;

&lt;p&gt;main函数，从初始化窗口开始了解。我们是在win环境下编译，忽略掉mac、linux的&lt;code&gt;define&lt;/code&gt;，main函数就做了一件事：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;QGCApplication* app = new QGCApplication(argc, argv, runUnitTests);
Q_CHECK_PTR(app);
app-&amp;gt;_initCommon();
//-- Initialize Cache System
getQGCMapEngine()-&amp;gt;init();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中QGCMapEngine初始化地图引擎，在此不在展开，Q_CHECK_PTR宏是对指针是否合法的检测，在重要传参初始化指针的合法性检查中经常用到。&lt;/p&gt;

&lt;p&gt;顺着QGCApplication.cc源码看去初始化了什么：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;// Set up our logging filters
    QGCLoggingCategoryRegister::instance()-&amp;gt;setFilterRulesFromSettings(loggingOptions);
 // gstreamer debug settings
    QString savePath, gstDebugLevel;
    if (settings.contains(AppSettings::savePathName)) {
         savePath = settings.value(&amp;quot;SavePath&amp;quot;).toString() + &amp;quot;/Logs/gst&amp;quot;; // hardcode log path here, appsetting is not available yet
         if (!QDir(savePath).exists()) {
             QDir().mkdir(savePath);
         }
    }
    if (settings.contains(AppSettings::gstDebugName)) {
        gstDebugLevel = &amp;quot;*:&amp;quot; + settings.value(&amp;quot;GstreamerDebugLevel&amp;quot;).toString();
    }

    // Initialize Video Streaming
    initializeVideoStreaming(argc, argv, savePath.toUtf8().data(), gstDebugLevel.toUtf8().data());

    _toolbox = new QGCToolbox(this);
    _toolbox-&amp;gt;setChildToolboxes();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在QGCApplication实例化的时候初始化了依赖于gstreamer的视频流播放件和系统设置，并Qdebug()出了软件的版本号Git版本等软件信息。&lt;/p&gt;

&lt;p&gt;并在最后初始化了QGCToolbox，点开QGCToolbox.cc,就会发现这里包含了整个QGC的各个基本模块的初始化,在QGCToolbox实例化中同时将所有模块进行了初始化，&lt;/p&gt;

&lt;p&gt;并在&lt;code&gt;setChildboxes()&lt;/code&gt;中与将toolbox传入方便各类之间交互传递信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;void QGCToolbox::setChildToolboxes(void)
{
    // SettingsManager must be first so settings are available to any subsequent tools
    _settingsManager-&amp;gt;setToolbox(this);

    _corePlugin-&amp;gt;setToolbox(this);
    _audioOutput-&amp;gt;setToolbox(this);
    _factSystem-&amp;gt;setToolbox(this);
    _firmwarePluginManager-&amp;gt;setToolbox(this);
#ifndef __mobile__
    _gpsManager-&amp;gt;setToolbox(this);
#endif
    _imageProvider-&amp;gt;setToolbox(this);
    _joystickManager-&amp;gt;setToolbox(this);
    _linkManager-&amp;gt;setToolbox(this);
    _mavlinkProtocol-&amp;gt;setToolbox(this);
    _missionCommandTree-&amp;gt;setToolbox(this);
    _multiVehicleManager-&amp;gt;setToolbox(this);
    _mapEngineManager-&amp;gt;setToolbox(this);
    _uasMessageHandler-&amp;gt;setToolbox(this);
    _followMe-&amp;gt;setToolbox(this);
    _qgcPositionManager-&amp;gt;setToolbox(this);
    _videoManager-&amp;gt;setToolbox(this);
    _mavlinkLogManager-&amp;gt;setToolbox(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在后面会展开学习这些模块。&lt;/p&gt;

&lt;p&gt;接下来是&lt;code&gt;QGCApplication::_initCommon(void)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;QSettings settings;

    // Register our Qml objects

    qmlRegisterType&amp;lt;QGCPalette&amp;gt;     (&amp;quot;QGroundControl.Palette&amp;quot;, 1, 0, &amp;quot;QGCPalette&amp;quot;);
    qmlRegisterType&amp;lt;QGCMapPalette&amp;gt;  (&amp;quot;QGroundControl.Palette&amp;quot;, 1, 0, &amp;quot;QGCMapPalette&amp;quot;);

    qmlRegisterUncreatableType&amp;lt;CoordinateVector&amp;gt;    (&amp;quot;QGroundControl&amp;quot;,                  1, 0, &amp;quot;CoordinateVector&amp;quot;,       &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;QmlObjectListModel&amp;gt;  (&amp;quot;QGroundControl&amp;quot;,                  1, 0, &amp;quot;QmlObjectListModel&amp;quot;,     &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;MissionCommandTree&amp;gt;  (&amp;quot;QGroundControl&amp;quot;,                  1, 0, &amp;quot;MissionCommandTree&amp;quot;,     &amp;quot;Reference only&amp;quot;);

    qmlRegisterUncreatableType&amp;lt;AutoPilotPlugin&amp;gt;     (&amp;quot;QGroundControl.AutoPilotPlugin&amp;quot;,      1, 0, &amp;quot;AutoPilotPlugin&amp;quot;,        &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;VehicleComponent&amp;gt;    (&amp;quot;QGroundControl.AutoPilotPlugin&amp;quot;,      1, 0, &amp;quot;VehicleComponent&amp;quot;,       &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;Vehicle&amp;gt;             (&amp;quot;QGroundControl.Vehicle&amp;quot;,              1, 0, &amp;quot;Vehicle&amp;quot;,                &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;MissionItem&amp;gt;         (&amp;quot;QGroundControl.Vehicle&amp;quot;,              1, 0, &amp;quot;MissionItem&amp;quot;,            &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;MissionManager&amp;gt;      (&amp;quot;QGroundControl.Vehicle&amp;quot;,              1, 0, &amp;quot;MissionManager&amp;quot;,         &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;ParameterManager&amp;gt;    (&amp;quot;QGroundControl.Vehicle&amp;quot;,              1, 0, &amp;quot;ParameterManager&amp;quot;,       &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;JoystickManager&amp;gt;     (&amp;quot;QGroundControl.JoystickManager&amp;quot;,      1, 0, &amp;quot;JoystickManager&amp;quot;,        &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;Joystick&amp;gt;            (&amp;quot;QGroundControl.JoystickManager&amp;quot;,      1, 0, &amp;quot;Joystick&amp;quot;,               &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;QGCPositionManager&amp;gt;  (&amp;quot;QGroundControl.QGCPositionManager&amp;quot;,   1, 0, &amp;quot;QGCPositionManager&amp;quot;,     &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;QGCMapPolygon&amp;gt;       (&amp;quot;QGroundControl.FlightMap&amp;quot;,            1, 0, &amp;quot;QGCMapPolygon&amp;quot;,          &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;MissionController&amp;gt;   (&amp;quot;QGroundControl.Controllers&amp;quot;,          1, 0, &amp;quot;MissionController&amp;quot;,      &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;GeoFenceController&amp;gt;  (&amp;quot;QGroundControl.Controllers&amp;quot;,          1, 0, &amp;quot;GeoFenceController&amp;quot;,     &amp;quot;Reference only&amp;quot;);
    qmlRegisterUncreatableType&amp;lt;RallyPointController&amp;gt;(&amp;quot;QGroundControl.Controllers&amp;quot;,          1, 0, &amp;quot;RallyPointController&amp;quot;,    &amp;quot;Reference only&amp;quot;);

    qmlRegisterType&amp;lt;ParameterEditorController&amp;gt;      (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;ParameterEditorController&amp;quot;);
    qmlRegisterType&amp;lt;ESP8266ComponentController&amp;gt;     (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;ESP8266ComponentController&amp;quot;);
    qmlRegisterType&amp;lt;ScreenToolsController&amp;gt;          (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;ScreenToolsController&amp;quot;);
    qmlRegisterType&amp;lt;PlanMasterController&amp;gt;           (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;PlanElemementMasterController&amp;quot;);
    qmlRegisterType&amp;lt;ValuesWidgetController&amp;gt;         (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;ValuesWidgetController&amp;quot;);
    qmlRegisterType&amp;lt;QGCFileDialogController&amp;gt;        (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;QGCFileDialogController&amp;quot;);
    qmlRegisterType&amp;lt;RCChannelMonitorController&amp;gt;     (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;RCChannelMonitorController&amp;quot;);
    qmlRegisterType&amp;lt;JoystickConfigController&amp;gt;       (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;JoystickConfigController&amp;quot;);
    qmlRegisterType&amp;lt;LogDownloadController&amp;gt;          (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;LogDownloadController&amp;quot;);
    qmlRegisterType&amp;lt;SyslinkComponentController&amp;gt;     (&amp;quot;QGroundControl.Controllers&amp;quot;, 1, 0, &amp;quot;SyslinkComponentController&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在initconmmon中将Qt中的模块通过&lt;code&gt;qmlRegisterUncreatableType&lt;/code&gt;和&lt;code&gt;qmlRegisterType&lt;/code&gt;注册进元对象系统，使前端qml能够访问使用Qt中的元素。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qt项目打包发布</title>
      <link>https://newjames.github.io/post/third/</link>
      <pubDate>Mon, 04 Nov 2019 17:00:05 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/third/</guid>
      <description>

&lt;h1 id=&#34;qt项目打包发布&#34;&gt;Qt项目打包发布&lt;/h1&gt;

&lt;p&gt;Qt项目打包一般分为以下流程：
- 添加qt依赖库
- 添加外部依赖库
通过Qt自带的工具进行Qt项目的发布还是比较简单的，以下发布流程操作与win10环境，linux系统下区别不大&lt;/p&gt;

&lt;p&gt;首先在Qt中构建编译Release项目，将编译生成好的release文件中的&lt;strong&gt;.exe文件&lt;/strong&gt;单独复制到一单独文件夹中。&lt;/p&gt;

&lt;p&gt;使用Qt自带的Qt*-bit for Desktop(#)命令行,其中 * 为Qt版本号，#为编译时所对应的编译器，然后cd到&lt;strong&gt;.exe&lt;/strong&gt;文件夹中，如果是Widget Application(不使用Qquick)项目，&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;windeployqt %.exe&lt;/code&gt;命令，%为项目名称，如果是Quick Application 执行 &lt;code&gt;windeployqt %.exe --qmldir &amp;quot;qml路径&amp;quot;&lt;/code&gt;，qml路径为&lt;strong&gt;Qt安装路径\版本号\编译器\qml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来命令行就会在目录下添加Qt对应的依赖lib文件，若项目有依赖外部其他第三方库，将第三方库的静态链接库添加至文件夹中即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>多个Lib静态库合并为一个的方法</title>
      <link>https://newjames.github.io/post/second/</link>
      <pubDate>Sat, 26 Oct 2019 13:30:01 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/second/</guid>
      <description>

&lt;p&gt;#多个Lib静态库合并为一个的方法&lt;/p&gt;

&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;当项目的依赖库较多时，我们在自我编译添加链接和项目发布时都十分的麻烦，想到之前Opencv的Lib库只有一个Opencv_world.lib，遂想到能否将多个Lib合并起来。网上还是有大量的回答的，现假装搬运复述一遍。&lt;br /&gt;
假设现在有01.lib,02.lib,03.lib三个lib库，需要合并成combine.lib&lt;/p&gt;

&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先需要vsIDE,一般windows下写c++应该都会装吧，在vs安装路径中
&lt;code&gt;你的安装路径\VC\bin\lib.exe&lt;/code&gt;，双击lib.exe，若缺少运行环境，把对应的动态链接库拷贝到文件夹下即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将需要合并的01.lib,02.lib,03.lib复制到上述工作目录中。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;之后打开CMD控制台cd进入lib.exe工作目录下,在命令行中输入`lib.exe /output: combine.lib 01.lib 02.lib 03.lib`,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运行后如果库之间的某些函数是相同的（不是重载），lib,exe会报warning,这个不用担心，我再合并opencv的库时候刷了满屏。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Clone下载主题失败及解决</title>
      <link>https://newjames.github.io/post/first/</link>
      <pubDate>Mon, 21 Oct 2019 16:42:19 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/first/</guid>
      <description>

&lt;h1 id=&#34;git-clone-下载主题出错及解决&#34;&gt;Git Clone 下载主题出错及解决&lt;/h1&gt;

&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;

&lt;p&gt;第一次使用Hugo实现静态网站生成，在下载主题时遇到如下问题:&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git&lt;/code&gt;时报错&lt;br /&gt;
错误显示&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error: RPC failed; curl 18 transfer closed with outstanding read data remaining&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;fatal: The remote end hung up unexpectedly&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;fatal: early EOF&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;fatal: index-pack failed&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;在网上大致搜寻了一下，一般是说项目太久，Tag资源文件太大所导致一般是如下两个解决方案。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法一&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;扩容&lt;/strong&gt; &lt;code&gt;git config --global http.postBuffer 524288000&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这个方法我没有成功，大家可以先试试，没有成功推荐方法二，还出错，我就没经历过&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法二&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将连接方式由http改成ssh，即&lt;code&gt;https://&lt;/code&gt;改为&lt;code&gt;git://&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;以上问题都是在win10下遇到的。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About James</title>
      <link>https://newjames.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newjames.github.io/about/</guid>
      <description>&lt;p&gt;&lt;strong&gt;机械专业的小码农&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;主要从事方向：C++ Qt 机器视觉&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://newjames.github.io/images/Wechat.jpg&#34; alt=&#34;微信&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>