<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on James Blog</title>
    <link>https://newjames.github.io/post/</link>
    <description>Recent content in Posts on James Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 13:30:01 +0800</lastBuildDate>
    
	<atom:link href="https://newjames.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>程序内存布局</title>
      <link>https://newjames.github.io/post/ninth/</link>
      <pubDate>Sun, 26 Jan 2020 13:30:01 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/ninth/</guid>
      <description>学习：剖析程序的内存布局 原文地址：http://duartes.org/gustavo/blog/
原文翻译：https://blog.csdn.net/drshenlei/article/details/4339110
内存管理多少年都不会变，这篇09年的文章到今天又重新学习了一遍，之前在深度搜索C++对象模型中看到过，以下是正文。
翻译原文 在多任务操作系统中的每一个进程都运行在一个属于它自己的内存沙盘中。这个沙盘就是虚拟地址空间（virtual address space），在32位模式下它总是一个4GB的内存地址块。这些虚拟地址通过页表（page table）映射到物理内存，页表由操作系统维护并被处理器引用。每一个进程拥有一套属于它自己的页表，但是还有一个隐情。只要虚拟地址被使能，那么它就会作用于这台机器上运行的所有软件，包括内核本身。因此一部分虚拟地址必须保留给内核使用：
这并不意味着内核使用了那么多的物理内存，仅表示它可支配这么大的地址空间，可根据内核需要，将其映射到物理内存。内核空间在页表中拥有较高的特权级（ring 2或以下），因此只要用户态的程序试图访问这些页，就会导致一个页错误（page fault）。在Linux中，内核空间是持续存在的，并且在所有进程中都映射到同样的物理内存。内核代码和数据总是可寻址的，随时准备处理中断和系统调用。与此相反，用户模式地址空间的映射随进程切换的发生而不断变化：
蓝色区域表示映射到物理内存的虚拟地址，而白色区域表示未映射的部分。在上面的例子中，Firefox使用了相当多的虚拟地址空间，因为它是传说中的吃内存大户。地址空间中的各个条带对应于不同的内存段（memory segment），如：堆、栈之类的。记住，这些段只是简单的内存地址范围，与Intel处理器的段没有关系。不管怎样，下面是一个Linux进程的标准的内存段布局：
当计算机开心、安全、可爱、正常的运转时，几乎每一个进程的各个段的起始虚拟地址都与上图完全一致，这也给远程发掘程序安全漏洞打开了方便之门。一个发掘过程往往需要引用绝对内存地址：栈地址，库函数地址等。远程攻击者必须依赖地址空间布局的一致性，摸索着选择这些地址。如果让他们猜个正着，有人就会被整了。因此，地址空间的随机排布方式逐渐流行起来。Linux通过对栈、内存映射段、堆的起始地址加上随机的偏移量来打乱布局。不幸的是，32位地址空间相当紧凑，给随机化所留下的空当不大，削弱了这种技巧的效果。
进程地址空间中最顶部的段是栈，大多数编程语言将之用于存储局部变量和函数参数。调用一个方法或函数会将一个新的栈桢（stack frame）压入栈中。栈桢在函数返回时被清理。也许是因为数据严格的遵从LIFO的顺序，这个简单的设计意味着不必使用复杂的数据结构来追踪栈的内容，只需要一个简单的指针指向栈的顶端即可。因此压栈（pushing）和退栈（popping）过程非常迅速、准确。另外，持续的重用栈空间有助于使活跃的栈内存保持在CPU缓存中，从而加速访问。进程中的每一个线程都有属于自己的栈。
通过不断向栈中压入的数据，超出其容量就有会耗尽栈所对应的内存区域。这将触发一个页故障（page fault），并被Linux的expand_stack()处理，它会调用acct_stack_growth()来检查是否还有合适的地方用于栈的增长。如果栈的大小低于RLIMIT_STACK（通常是8MB），那么一般情况下栈会被加长，程序继续愉快的运行，感觉不到发生了什么事情。这是一种将栈扩展至所需大小的常规机制。然而，如果达到了最大的栈空间大小，就会栈溢出（stack overflow），程序收到一个段错误（Segmentation Fault）。当映射了的栈区域扩展到所需的大小后，它就不会再收缩回去，即使栈不那么满了。这就好比联邦预算，它总是在增长的。
动态栈增长是唯一一种访问未映射内存区域（图中白色区域）而被允许的情形。其它任何对未映射内存区域的访问都会触发页故障，从而导致段错误。一些被映射的区域是只读的，因此企图写这些区域也会导致段错误。
在栈的下方，是我们的内存映射段。此处，内核将文件的内容直接映射到内存。任何应用程序都可以通过Linux的mmap()系统调用（实现）或Windows的CreateFileMapping() / MapViewOfFile()请求这种映射。内存映射是一种方便高效的文件I/O方式，所以它被用于加载动态库。创建一个不对应于任何文件的匿名内存映射也是可能的，此方法用于存放程序的数据。在Linux中，如果你通过malloc()请求一大块内存，C运行库将会创建这样一个匿名映射而不是使用堆内存。‘大块’意味着比MMAP_THRESHOLD还大，缺省是128KB，可以通过mallopt()调整。
说到堆，它是接下来的一块地址空间。与栈一样，堆用于运行时内存分配；但不同点是，堆用于存储那些生存期与函数调用无关的数据。大部分语言都提供了堆管理功能。因此，满足内存请求就成了语言运行时库及内核共同的任务。在C语言中，堆分配的接口是malloc()系列函数，而在具有垃圾收集功能的语言（如C#）中，此接口是new关键字。
如果堆中有足够的空间来满足内存请求，它就可以被语言运行时库处理而不需要内核参与。否则，堆会被扩大，通过brk()系统调用（实现）来分配请求所需的内存块。堆管理是很复杂的，需要精细的算法，应付我们程序中杂乱的分配模式，优化速度和内存使用效率。处理一个堆请求所需的时间会大幅度的变动。实时系统通过特殊目的分配器来解决这个问题。堆也可能会变得零零碎碎，如下图所示：
最后，我们来看看最底部的内存段：BSS，数据段，代码段。在C语言中，BSS和数据段保存的都是静态（全局）变量的内容。区别在于BSS保存的是未被初始化的静态变量内容，它们的值不是直接在程序的源代码中设定的。BSS内存区域是匿名的：它不映射到任何文件。如果你写static int cntActiveUsers，则cntActiveUsers的内容就会保存在BSS中。
另一方面，数据段保存在源代码中已经初始化了的静态变量内容。这个内存区域不是匿名的。它映射了一部分的程序二进制镜像，也就是源代码中指定了初始值的静态变量。所以，如果你写static int cntWorkerBees = 10，则cntWorkerBees的内容就保存在数据段中了，而且初始值为10。尽管数据段映射了一个文件，但它是一个私有内存映射，这意味着更改此处的内存不会影响到被映射的文件。也必须如此，否则给全局变量赋值将会改动你硬盘上的二进制镜像，这是不可想象的。
下图中数据段的例子更加复杂，因为它用了一个指针。在此情况下，指针gonzo（4字节内存地址）本身的值保存在数据段中。而它所指向的实际字符串则不在这里。这个字符串保存在代码段中，代码段是只读的，保存了你全部的代码外加零零碎碎的东西，比如字符串字面值。代码段将你的二进制文件也映射到了内存中，但对此区域的写操作都会使你的程序收到段错误。这有助于防范指针错误，虽然不像在C语言编程时就注意防范来得那么有效。下图展示了这些段以及我们例子中的变量：
你可以通过阅读文件/proc/pid_of_process/maps来检验一个Linux进程中的内存区域。记住一个段可能包含许多区域。比如，每个内存映射文件在mmap段中都有属于自己的区域，动态库拥有类似BSS和数据段的额外区域。下一篇文章讲说明这些“区域”（area）的真正含义。有时人们提到“数据段”，指的就是全部的数据段 + BSS + 堆。
你可以通过nm和objdump命令来察看二进制镜像，打印其中的符号，它们的地址，段等信息。最后需要指出的是，前文描述的虚拟地址布局在Linux中是一种“灵活布局”（flexible layout），而且以此作为默认方式已经有些年头了。它假设我们有值RLIMIT_STACK。当情况不是这样时，Linux退回使用“经典布局”（classic layout），如下图所示：
对虚拟地址空间的布局就讲这些吧。下一篇文章将讨论内核是如何跟踪这些内存区域的。我们会分析内存映射，看看文件的读写操作是如何与之关联的，以及内存使用概况的含义。</description>
    </item>
    
    <item>
      <title>Qt元对象系统（一）</title>
      <link>https://newjames.github.io/post/tenth/</link>
      <pubDate>Fri, 06 Dec 2019 17:56:23 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/tenth/</guid>
      <description>Qt 元对象系统(一) Qt信号槽是一个很强大的机制，随着一直用Qt深入就很好奇所有继承自QObject的对象是如何通过元对象系统联系，而关于元对象系统主要有一下问题： - 什么是Qt元对象系统，它包含了哪些内容，它在我们的程序中做了什么？ - moc工具是什么，Q_OBJECT宏是什么？ - 元对象系统如何工作在Qml、C++、Javvascrip的混合编程的？ - 信号与槽机制、Qt事件机制、MFC消息机制三者的区别是什么？ - 信号与槽在单线程与多线程中是如何工作的？ - 如何在信号与槽机制中，传递自定义类型参数？
什么是Qt元对象系统 元对象系统为Qt提供了信号与槽机制、实施类型信息和动态属性系统。系统的基础是以下三点： - Object类。
对象模型的核心，信号槽是基于对象模型的，体现在我们常用的QObject::connect()函数上。
对象的组织形式是树形结构，通过QObject::setParent()、QObject::findChild()、QObject::findChilren()可以体现出来。
每一个对象都是完全独立，并且可以查出该对象的继承关系。这些对象不同的名字是我们使用findChild（）函数的关键，也是我们在Qml、C++混合编程时的关键。这里QObject是QMetaobject帮助实现的，QMetaObject是设置这些属性规则，并建立对象们之间的关系的关键。
每个对象在销毁时都会发出信号具备安装事件过滤器。让对象接受或不接受某些事件及处理。如mouseEvent（）、timeEvent（），在某些没有继承Object类中是不能使用这些函数的，如QGraphicsItem以及它派生出来的其他图元类。 - Q_OBJECT
宏定义，程序员定义的类、信号、槽函数、注册的数据等通过宏定义成为元对象。
 moc(Meta-Object-Compiler)  元对象编译器，将Qt中定义的一些非C++关键字（如signals、slots）转化为C++编译器可识别。
moc在预编译之前进行操作，moc之后每一个包含Q_Object宏头文件，都会生成一个moc_XXX的CPP文件，这个中间文件通过qmake生成Makefiles。</description>
    </item>
    
    <item>
      <title>Qt语言家使用</title>
      <link>https://newjames.github.io/post/seventh/</link>
      <pubDate>Wed, 06 Nov 2019 15:56:23 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/seventh/</guid>
      <description> Qt语言家使用 最近要将项目做汉化，于是使用Qt语言家插件，它能够自动识别Qt和qml文件中的tr(&amp;ldquo;&amp;rdquo;)字段并生成文件供调用。
以下是基本操作步骤：
 在项目.pro文件中添加TRANSLATIONS + =zh_Cn.ts zh_En.ts 这里是指中英文两个语言版本，这里我的源项目是英文的，如果要将qml的tr一起添加进去则要添加以下信息：
lupdate_only { SOURCES+= \ ./src/VehicleSetup/*.qml \ ./src/QmlControls/*.qml \ ./src/AnalyzeView/*.qml \ ./src/FlightDisplay/*.qml \ ./src/FlightMap/*.qml \ ./src/FlightMap/Widgets/*.qml \ ./src/AutoPilotPlugins/PX4/*.qml \ ./src/MissionEditor/*.qml \ ./src/ViewWidgets/*.qml \ ./src/ui/toolbar/*.qml \ ./src/ui/*.qml \ ./src/FactSystem/FactControls/*.qml }  这里是在lupdate_only中添加qml文件路径 - 之后点击工具-&amp;gt;外部-&amp;gt;Qt语言家-&amp;gt;更新翻译 之后在目录下便会生成两个.ts文件 - 打开对应编译器目录下bin文件中linguist.exe Qt语言家 - 用Qt语言家打开相应的.ts文件进行翻译 - 翻译完成后点击Qtcreator工具-&amp;gt;外部-&amp;gt;Qt语言家-&amp;gt;发布翻译 - 在文件中引用.ts文件，注意：引用和必须在窗口创建前初始化时实例化QTrasnlator并加载好.ts文件
mTranslator = new QTranslator(this); _loadTranslatorFile(); void QGCApplication::_loadTranslatorFile() { bool isLoad=mTranslator-&amp;gt;load(QCoreApplication::applicationDirPath()+&amp;quot;/zh_Cn.qm&amp;quot;); qDebug()&amp;lt;&amp;lt;&amp;quot;setChinese&amp;quot;&amp;lt;&amp;lt;isLoad&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;; this-&amp;gt;installTranslator(mTranslator); }   </description>
    </item>
    
    <item>
      <title>QGC源码学习（3）关键数据传输</title>
      <link>https://newjames.github.io/post/sixth/</link>
      <pubDate>Wed, 06 Nov 2019 15:56:14 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/sixth/</guid>
      <description>QGC源码学习（3）关键数据传输 在无人系统上位机显示中，最为关键的数据为IMU上传的Roll,Pitch,Yaw和高度（深度）以及方位，在QGC中，由MAVLinkProtocol::messageReceived
接收到Mavlink数据后，通过信号槽：
Vehicle.cc connect(_mavlink, &amp;amp;MAVLinkProtocol::messageReceived, this, &amp;amp;Vehicle::_mavlinkMessageReceived); void Vehicle::_mavlinkMessageReceived(LinkInterface* link, mavlink_message_t message) { ... ... ... _uas-&amp;gt;receiveMessage(message); } UAS.cc void UAS::receiveMessage(mavlink_message_t message) { switch (message.compid) case MAV_...1: case MAV_...2: case MAV_...3: case MAVLINK_MSG_ID_ATTITUDE: { mavlink_attitude_t attitude; mavlink_msg_attitude_decode(&amp;amp;message, &amp;amp;attitude); quint64 time = getUnixReferenceTime(attitude.time_boot_ms); emit attitudeChanged(this, message.compid, QGC::limitAngleToPMPIf(attitude.roll), QGC::limitAngleToPMPIf(attitude.pitch), QGC::limitAngleToPMPIf(attitude.yaw), time); if (!wrongComponent) { lastAttitude = time; setRoll(QGC::limitAngleToPMPIf(attitude.roll)); setPitch(QGC::limitAngleToPMPIf(attitude.pitch)); setYaw(QGC::limitAngleToPMPIf(attitude.yaw)); attitudeKnown = true; emit attitudeChanged(this, getRoll(), getPitch(), getYaw(), time); } } break; .</description>
    </item>
    
    <item>
      <title>QGC源码学习(2)-ToolBox各模块学习</title>
      <link>https://newjames.github.io/post/fifth/</link>
      <pubDate>Wed, 06 Nov 2019 15:08:39 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/fifth/</guid>
      <description> QGC源码学习(2)-ToolBox各模块学习 QGC工具模块主要有以下组成：
 settingsManager corePlugin audioOutput -声音管理 factSystem -实例数据管理 firmwarePluginManager -固件管理 imageProvider joystickManager -摇杆管理 linkManager -数据连接管理 mavlinkProtocol -mavlink协议 misiionConmmandTree multiVehicleManager -多机器管理 mapEngineManager -地图引擎管理 uasMessageHandler -日志信息管理 followMe qgcPositionManager -QGC位置管理 videoManager -视频管理 mavlinkLogManager -mvlink协议注册管理  </description>
    </item>
    
    <item>
      <title>QGC源码学习(1)-main函数学习</title>
      <link>https://newjames.github.io/post/fourth/</link>
      <pubDate>Wed, 06 Nov 2019 14:08:39 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/fourth/</guid>
      <description>QGroundcontrol 源码学习（1）-万物之始main 作为非科班人员，第一次接触像QGroundcontrol这么庞大且杂乱的项目还是一头雾水，我在前期花了许多无效时间去摸索整个QGroundControl的架构和模型，
并由此总结出比较简单的中大型项目的学习规律。在此记录下来。
QGroundControl启动顺序 首选不不关注QGC的大体框架，即使通过文档先了解了也只是有了大致概念，真正深入理解和在此基础上进行二次开发还是需要细致到源码细节上。因此我还是先找到QGC的
main函数，从初始化窗口开始了解。我们是在win环境下编译，忽略掉mac、linux的define，main函数就做了一件事：
QGCApplication* app = new QGCApplication(argc, argv, runUnitTests); Q_CHECK_PTR(app); app-&amp;gt;_initCommon(); //-- Initialize Cache System getQGCMapEngine()-&amp;gt;init();  其中QGCMapEngine初始化地图引擎，在此不在展开，Q_CHECK_PTR宏是对指针是否合法的检测，在重要传参初始化指针的合法性检查中经常用到。
顺着QGCApplication.cc源码看去初始化了什么：
// Set up our logging filters QGCLoggingCategoryRegister::instance()-&amp;gt;setFilterRulesFromSettings(loggingOptions); // gstreamer debug settings QString savePath, gstDebugLevel; if (settings.contains(AppSettings::savePathName)) { savePath = settings.value(&amp;quot;SavePath&amp;quot;).toString() + &amp;quot;/Logs/gst&amp;quot;; // hardcode log path here, appsetting is not available yet if (!QDir(savePath).exists()) { QDir().mkdir(savePath); } } if (settings.contains(AppSettings::gstDebugName)) { gstDebugLevel = &amp;quot;*:&amp;quot; + settings.</description>
    </item>
    
    <item>
      <title>Qt项目打包发布</title>
      <link>https://newjames.github.io/post/third/</link>
      <pubDate>Mon, 04 Nov 2019 17:00:05 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/third/</guid>
      <description>Qt项目打包发布 Qt项目打包一般分为以下流程： - 添加qt依赖库 - 添加外部依赖库 通过Qt自带的工具进行Qt项目的发布还是比较简单的，以下发布流程操作与win10环境，linux系统下区别不大
首先在Qt中构建编译Release项目，将编译生成好的release文件中的.exe文件单独复制到一单独文件夹中。
使用Qt自带的Qt*-bit for Desktop(#)命令行,其中 * 为Qt版本号，#为编译时所对应的编译器，然后cd到.exe文件夹中，如果是Widget Application(不使用Qquick)项目，
执行windeployqt %.exe命令，%为项目名称，如果是Quick Application 执行 windeployqt %.exe --qmldir &amp;quot;qml路径&amp;quot;，qml路径为Qt安装路径\版本号\编译器\qml
接下来命令行就会在目录下添加Qt对应的依赖lib文件，若项目有依赖外部其他第三方库，将第三方库的静态链接库添加至文件夹中即可。</description>
    </item>
    
    <item>
      <title>多个Lib静态库合并为一个的方法</title>
      <link>https://newjames.github.io/post/second/</link>
      <pubDate>Sat, 26 Oct 2019 13:30:01 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/second/</guid>
      <description> #多个Lib静态库合并为一个的方法
问题 当项目的依赖库较多时，我们在自我编译添加链接和项目发布时都十分的麻烦，想到之前Opencv的Lib库只有一个Opencv_world.lib，遂想到能否将多个Lib合并起来。网上还是有大量的回答的，现假装搬运复述一遍。
假设现在有01.lib,02.lib,03.lib三个lib库，需要合并成combine.lib
解决方法  首先需要vsIDE,一般windows下写c++应该都会装吧，在vs安装路径中 你的安装路径\VC\bin\lib.exe，双击lib.exe，若缺少运行环境，把对应的动态链接库拷贝到文件夹下即可。
 将需要合并的01.lib,02.lib,03.lib复制到上述工作目录中。
 之后打开CMD控制台cd进入lib.exe工作目录下,在命令行中输入`lib.exe /output: combine.lib 01.lib 02.lib 03.lib`,
 运行后如果库之间的某些函数是相同的（不是重载），lib,exe会报warning,这个不用担心，我再合并opencv的库时候刷了满屏。
  </description>
    </item>
    
    <item>
      <title>Git Clone下载主题失败及解决</title>
      <link>https://newjames.github.io/post/first/</link>
      <pubDate>Mon, 21 Oct 2019 16:42:19 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/first/</guid>
      <description> Git Clone 下载主题出错及解决 问题 第一次使用Hugo实现静态网站生成，在下载主题时遇到如下问题:
使用 git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git时报错
错误显示
error: RPC failed; curl 18 transfer closed with outstanding read data remaining
fatal: The remote end hung up unexpectedly
fatal: early EOF
fatal: index-pack failed 在网上大致搜寻了一下，一般是说项目太久，Tag资源文件太大所导致一般是如下两个解决方案。
 方法一
扩容 git config --global http.postBuffer 524288000
 这个方法我没有成功，大家可以先试试，没有成功推荐方法二，还出错，我就没经历过
 方法二
 将连接方式由http改成ssh，即https://改为git://
   以上问题都是在win10下遇到的。  </description>
    </item>
    
    <item>
      <title>mySql快速学习</title>
      <link>https://newjames.github.io/post/eighth/</link>
      <pubDate>Mon, 07 Oct 2019 17:00:05 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/eighth/</guid>
      <description>Sql学习笔记 快速入门sql基本结构和知识、语法 基本概念 DBA：数据库管理员
DBMS: 数据库管理系统
DB：数据库
MySql：CS架构
数据库数据模型： - 层次模型 - 网状模型 - 关系模型
数据库设计遵循三范式 - 第一范式
数据库表中字段是单一属性，具有原子性，不可再分，关系型数据库一定满足第一范式。 - 第二范式
在第一范式基础上，数据库表列中不存在非主键依赖于其他非主键或主键的一部分时，即为第二范式。 - 第三范式
在第二范式基础上，数据库表中不存在非主键通过间接关系依赖主键的情况。
数据库安装和入门使用 详见https://www.cnblogs.com/laumians-notes/p/9069498.html#undefined
 启动/关闭服务 net start/stop servername 登录服务器 使用初始化默认root用户
mysql -h localhost -P 3306 -u root -p
 查看版本 select version() mysql --version
 显示数据库 show databases
 选中某一表 use [yourtables]
 显示表 show tables show tables from [yourtables]]
 查看当前所在库 select database()
 创建表 create table 表名{ l列名 列类型 列名 列类型 }</description>
    </item>
    
  </channel>
</rss>