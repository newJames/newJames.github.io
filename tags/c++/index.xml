<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on James Blog</title>
    <link>http://newJames.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on James Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Nov 2019 14:08:39 +0800</lastBuildDate>
    
	<atom:link href="http://newJames.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QGC源码学习(1)-main函数学习</title>
      <link>http://newJames.github.io/post/fourth/</link>
      <pubDate>Wed, 06 Nov 2019 14:08:39 +0800</pubDate>
      
      <guid>http://newJames.github.io/post/fourth/</guid>
      <description>QGroundcontrol 源码学习（1）-万物之始main 作为非科班人员，第一次接触像QGroundcontrol这么庞大且杂乱的项目还是一头雾水，我在前期花了许多无效时间去摸索整个QGroundControl的架构和模型，
并由此总结出比较简单的中大型项目的学习规律。在此记录下来。
QGroundControl启动顺序 首选不不关注QGC的大体框架，即使通过文档先了解了也只是有了大致概念，真正深入理解和在此基础上进行二次开发还是需要细致到源码细节上。因此我还是先找到QGC的
main函数，从初始化窗口开始了解。我们是在win环境下编译，忽略掉mac、linux的define，main函数就做了一件事：
QGCApplication* app = new QGCApplication(argc, argv, runUnitTests); Q_CHECK_PTR(app); app-&amp;gt;_initCommon(); //-- Initialize Cache System getQGCMapEngine()-&amp;gt;init();  其中QGCMapEngine初始化地图引擎，在此不在展开，Q_CHECK_PTR宏是对指针是否合法的检测，在重要传参初始化指针的合法性检查中经常用到。
顺着QGCApplication.cc源码看去初始化了什么：
// Set up our logging filters QGCLoggingCategoryRegister::instance()-&amp;gt;setFilterRulesFromSettings(loggingOptions); // gstreamer debug settings QString savePath, gstDebugLevel; if (settings.contains(AppSettings::savePathName)) { savePath = settings.value(&amp;quot;SavePath&amp;quot;).toString() + &amp;quot;/Logs/gst&amp;quot;; // hardcode log path here, appsetting is not available yet if (!QDir(savePath).exists()) { QDir().mkdir(savePath); } } if (settings.contains(AppSettings::gstDebugName)) { gstDebugLevel = &amp;quot;*:&amp;quot; + settings.</description>
    </item>
    
    <item>
      <title>多个Lib静态库合并为一个的方法</title>
      <link>http://newJames.github.io/post/second/</link>
      <pubDate>Sat, 26 Oct 2019 13:30:01 +0800</pubDate>
      
      <guid>http://newJames.github.io/post/second/</guid>
      <description> #多个Lib静态库合并为一个的方法
问题 当项目的依赖库较多时，我们在自我编译添加链接和项目发布时都十分的麻烦，想到之前Opencv的Lib库只有一个Opencv_world.lib，遂想到能否将多个Lib合并起来。网上还是有大量的回答的，现假装搬运复述一遍。
假设现在有01.lib,02.lib,03.lib三个lib库，需要合并成combine.lib
解决方法  首先需要vsIDE,一般windows下写c++应该都会装吧，在vs安装路径中 你的安装路径\VC\bin\lib.exe，双击lib.exe，若缺少运行环境，把对应的动态链接库拷贝到文件夹下即可。
 将需要合并的01.lib,02.lib,03.lib复制到上述工作目录中。
 之后打开CMD控制台cd进入lib.exe工作目录下,在命令行中输入`lib.exe /output: combine.lib 01.lib 02.lib 03.lib`,
 运行后如果库之间的某些函数是相同的（不是重载），lib,exe会报warning,这个不用担心，我再合并opencv的库时候刷了满屏。
  </description>
    </item>
    
  </channel>
</rss>