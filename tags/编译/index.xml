<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译 on James Blog</title>
    <link>https://newjames.github.io/tags/%E7%BC%96%E8%AF%91/</link>
    <description>Recent content in 编译 on James Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Nov 2019 17:00:05 +0800</lastBuildDate>
    
	<atom:link href="https://newjames.github.io/tags/%E7%BC%96%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qt项目打包发布</title>
      <link>https://newjames.github.io/post/third/</link>
      <pubDate>Mon, 04 Nov 2019 17:00:05 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/third/</guid>
      <description>Qt项目打包发布 Qt项目打包一般分为以下流程： - 添加qt依赖库 - 添加外部依赖库 通过Qt自带的工具进行Qt项目的发布还是比较简单的，以下发布流程操作与win10环境，linux系统下区别不大
首先在Qt中构建编译Release项目，将编译生成好的release文件中的.exe文件单独复制到一单独文件夹中。
使用Qt自带的Qt*-bit for Desktop(#)命令行,其中 * 为Qt版本号，#为编译时所对应的编译器，然后cd到.exe文件夹中，如果是Widget Application(不使用Qquick)项目，
执行windeployqt %.exe命令，%为项目名称，如果是Quick Application 执行 windeployqt %.exe --qmldir &amp;quot;qml路径&amp;quot;，qml路径为Qt安装路径\版本号\编译器\qml
接下来命令行就会在目录下添加Qt对应的依赖lib文件，若项目有依赖外部其他第三方库，将第三方库的静态链接库添加至文件夹中即可。</description>
    </item>
    
    <item>
      <title>多个Lib静态库合并为一个的方法</title>
      <link>https://newjames.github.io/post/second/</link>
      <pubDate>Sat, 26 Oct 2019 13:30:01 +0800</pubDate>
      
      <guid>https://newjames.github.io/post/second/</guid>
      <description> #多个Lib静态库合并为一个的方法
问题 当项目的依赖库较多时，我们在自我编译添加链接和项目发布时都十分的麻烦，想到之前Opencv的Lib库只有一个Opencv_world.lib，遂想到能否将多个Lib合并起来。网上还是有大量的回答的，现假装搬运复述一遍。
假设现在有01.lib,02.lib,03.lib三个lib库，需要合并成combine.lib
解决方法  首先需要vsIDE,一般windows下写c++应该都会装吧，在vs安装路径中 你的安装路径\VC\bin\lib.exe，双击lib.exe，若缺少运行环境，把对应的动态链接库拷贝到文件夹下即可。
 将需要合并的01.lib,02.lib,03.lib复制到上述工作目录中。
 之后打开CMD控制台cd进入lib.exe工作目录下,在命令行中输入`lib.exe /output: combine.lib 01.lib 02.lib 03.lib`,
 运行后如果库之间的某些函数是相同的（不是重载），lib,exe会报warning,这个不用担心，我再合并opencv的库时候刷了满屏。
  </description>
    </item>
    
  </channel>
</rss>